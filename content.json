{"meta":{"title":"迅的个人博客","subtitle":"","description":"","author":"asOneMaster","url":"https://AsOneMaster.github.io","root":"/"},"pages":[{"title":"categories","date":"2022-08-17T04:13:22.000Z","updated":"2022-08-17T04:14:12.172Z","comments":true,"path":"categories/index.html","permalink":"https://asonemaster.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-08-17T04:13:30.000Z","updated":"2022-08-17T04:14:29.129Z","comments":true,"path":"tags/index.html","permalink":"https://asonemaster.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"基础","slug":"go基础","date":"2022-08-17T05:16:20.029Z","updated":"2022-08-17T05:54:45.835Z","comments":true,"path":"2022/08/17/go基础/","link":"","permalink":"https://asonemaster.github.io/2022/08/17/go%E5%9F%BA%E7%A1%80/","excerpt":"一、基础golang中make和new的区别 （必问）共同点：都是给变量分配内存；不同点： 返回类型不同： new创建返回指针，指向分配类型的指针，分配的空间置为零，该类型的零值；make返回变量本身，分配空间后会进行初始； 分配类型：new可以为任意类型进行分配；make只能为slice，map，chan引用类型数据进行分配空间。 数组和切片的区别 （必问）共同点：都是通过下标访问，并且都有容量长度； 不同点： 定义方式不同：数组必须指定大小，定义后不能增加容量和长度；切片不用，定义后切片数据增多，会自动扩容（当原切片长度小于1024时，新切片的容量会直接翻倍；超过1024会反复地增加25%，直到新容量超过所需要的容量）； 类型不同：数值为值类型；切片为引用类型，每个切片底层引用一个数组，所以切片扩容后，便会指向一个新的底层数组，内存地址跟着改变。","text":"一、基础golang中make和new的区别 （必问）共同点：都是给变量分配内存；不同点： 返回类型不同： new创建返回指针，指向分配类型的指针，分配的空间置为零，该类型的零值；make返回变量本身，分配空间后会进行初始； 分配类型：new可以为任意类型进行分配；make只能为slice，map，chan引用类型数据进行分配空间。 数组和切片的区别 （必问）共同点：都是通过下标访问，并且都有容量长度； 不同点： 定义方式不同：数组必须指定大小，定义后不能增加容量和长度；切片不用，定义后切片数据增多，会自动扩容（当原切片长度小于1024时，新切片的容量会直接翻倍；超过1024会反复地增加25%，直到新容量超过所需要的容量）； 类型不同：数值为值类型；切片为引用类型，每个切片底层引用一个数组，所以切片扩容后，便会指向一个新的底层数组，内存地址跟着改变。 for range 的时候它的地址会发生变化么？在 for a,b := range c 遍历中，a,b只会存一份地址，循环后会重新赋值，内存地址不变；因此for中创建协程后不要传入a或b的地址，可以再循环中通过创建临时变量解决。","categories":[{"name":"go语言","slug":"go语言","permalink":"https://asonemaster.github.io/categories/go%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"数组与切片","slug":"数组与切片","permalink":"https://asonemaster.github.io/tags/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-08-17T01:50:07.335Z","updated":"2022-08-17T05:55:09.323Z","comments":true,"path":"2022/08/17/hello-world/","link":"","permalink":"https://asonemaster.github.io/2022/08/17/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"go语言","slug":"go语言","permalink":"https://asonemaster.github.io/categories/go%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"map","slug":"map","permalink":"https://asonemaster.github.io/tags/map/"}]}],"categories":[{"name":"go语言","slug":"go语言","permalink":"https://asonemaster.github.io/categories/go%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"数组与切片","slug":"数组与切片","permalink":"https://asonemaster.github.io/tags/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/"},{"name":"map","slug":"map","permalink":"https://asonemaster.github.io/tags/map/"}]}